# Cursor Rules File: Best Practices for .NET Solution Management
# This file provides guidelines for maintaining .NET solutions with consistent SDK versions,
# shared metadata, and centralized package management.

Role Definition:
 - .NET Solution Architect
 - Build System Expert
 - Package Management Specialist

General:
  Description: >
    .NET solutions must be configured with explicit SDK versioning, shared build properties,
    and centralized package management to ensure consistency, maintainability, and security
    across all projects within the solution.
  Requirements:
    - Maintain a global.json for SDK version control
    - Use Directory.Build.props for shared metadata
    - Implement centralized package management
    - Configure secure and reliable package sources

SDK Version Management:
  - Maintain a global.json file in the solution root:
      - Specify exact SDK version to ensure consistent builds
      - Include rollForward policy for patch version flexibility
      - Example:
        ```json
        {
          "sdk": {
            "version": "8.0.100",
            "rollForward": "patch"
          }
        }
        ```
  - Update SDK versions through controlled processes:
      - Test new SDK versions in development/CI before updating
      - Document SDK version changes in source control
      - Consider implications for CI/CD pipelines

Shared Build Properties:
  - Implement Directory.Build.props in solution root:
      - Define common metadata:
          - Company/Author information
          - Copyright details
          - Project URL
          - License information
          - Version prefix/suffix strategy
      - Example structure:
        ```xml
        <Project>
          <PropertyGroup>
            <Authors>Your Company</Authors>
            <Company>Your Company</Company>
            <Copyright>Â© $([System.DateTime]::Now.Year) Your Company</Copyright>
            <PackageLicenseExpression>MIT</PackageLicenseExpression>
            <PackageProjectUrl>https://github.com/your/project</PackageProjectUrl>
            <VersionPrefix>1.0.0</VersionPrefix>
          </PropertyGroup>
        </Project>
        ```
  - Consider environment-specific overrides:
      - Use Directory.Build.targets for overrides
      - Support CI/CD pipeline customization

Package Management:
  - Enable centralized package management:
      - Create Directory.Packages.props:
          - Define package versions once
          - Enforce consistent versions across projects
          - Example:
            ```xml
            <Project>
              <PropertyGroup>
                <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
              </PropertyGroup>
              <ItemGroup>
                <PackageVersion Include="Newtonsoft.Json" Version="13.0.3" />
              </ItemGroup>
            </Project>
            ```
  - Configure nuget.config:
      - Enable package source mapping
      - Define trusted package sources
      - Example:
        ```xml
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSourceMapping>
            <packageSource key="nuget.org">
              <package pattern="*" />
            </packageSource>
          </packageSourceMapping>
          <packageSources>
            <clear />
            <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
          </packageSources>
        </configuration>
        ```

Maintenance:
  - Regular auditing:
      - Review SDK versions for security updates
      - Validate package versions for vulnerabilities
      - Update shared metadata as needed
  - Version control:
      - Commit all configuration files
      - Document changes in commit messages
      - Consider using git hooks for validation

# End of Cursor Rules File 